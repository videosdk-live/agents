name: Build and Deploy Documentation

on:
  push:
    tags:
      - "v*"

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pdoc3

      - name: Install agents package
        run: |
          pip install -e ./videosdk-agents

      - name: Install all plugins
        run: |
          for plugin_dir in videosdk-plugins/videosdk-plugins-*; do
            if [ -d "$plugin_dir" ]; then
              echo "Installing plugin: $plugin_dir"
              pip install -e "$plugin_dir"
            fi
          done

      - name: Build documentation
        run: |
          python scripts/build_docs.py --base-url "/agent-sdk-reference"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.DOCS_REPOSITORY }}
          token: ${{ secrets.DOCS_REPO_TOKEN }}
          path: docs-repo

      - name: Get tag version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$GITHUB_REF" >> $GITHUB_OUTPUT
          echo "Tag push detected - using version: $VERSION"

      - name: Create new branch for docs update
        run: |
          cd docs-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="docs-update-v${{ steps.get_version.outputs.version }}"
          git checkout -b "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update documentation
        run: |
          cd docs-repo

          if [ -d "static/agent-sdk-reference" ]; then
            echo "Removing old agent-sdk-reference directory..."
            rm -rf static/agent-sdk-reference/
          fi

          mkdir -p static/

          echo "Copying new agent-sdk-reference to static folder..."
          cp -r ../agent-sdk-reference/ static/

          if [ -f "VERSION" ]; then
            echo "${{ steps.get_version.outputs.version }}" > VERSION
          fi

          echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC") - Version ${{ steps.get_version.outputs.version }}" > LAST_UPDATED

      - name: Commit and push changes
        run: |
          cd docs-repo
          git add .
          git commit -m "Update documentation for version ${{ steps.get_version.outputs.version }}

          - Auto-generated from tag ${{ steps.get_version.outputs.tag }}
          - Built on $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Triggered by GitHub Actions workflow"

          git push origin "${{ env.branch_name }}"

      - name: Create Pull Request
        run: |
          cd docs-repo

          gh pr create \
            --title "Update documentation for version ${{ steps.get_version.outputs.version }}" \
            --body "## Documentation Update

          This PR updates the documentation for version **${{ steps.get_version.outputs.version }}**.

          ### Changes
          - Updated API documentation for all packages and plugins
          - Generated from git tag: \`${{ steps.get_version.outputs.tag }}\`
          - Built automatically by GitHub Actions workflow

          ### Trigger
          This update was automatically triggered by pushing the git tag \`${{ steps.get_version.outputs.tag }}\`.

          ### Review
          Please review the changes and merge when ready.

          ---
          *Auto-generated by GitHub Actions*" \
            --base main \
            --head "${{ env.branch_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.DOCS_REPO_TOKEN }}

      - name: Cleanup build artifacts
        if: always()
        run: |
          echo "Cleaning up build artifacts..."

          if [ -d "docs" ]; then
            echo "Removing docs directory..."
            rm -rf docs/
          fi

          if [ -d "docs-repo" ]; then
            echo "Removing docs-repo directory..."
            rm -rf docs-repo/
          fi

          echo "Cleaning pip cache..."
          pip cache purge

          echo "Cleaning Python cache files..."
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete 2>/dev/null || true

          echo "Cleanup completed"
